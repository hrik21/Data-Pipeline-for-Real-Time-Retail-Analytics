version: '3.8'

services:
  # PostgreSQL database for Airflow metadata
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pipeline_network

  # Redis for Airflow Celery backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pipeline_network

  # Airflow webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW_ROLE: webserver
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline_network

  # Airflow scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW_ROLE: scheduler
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline_network

  # Airflow worker
  airflow-worker:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW_ROLE: worker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline_network

  # dbt service
  dbt:
    build:
      context: .
      dockerfile: docker/dbt/Dockerfile
    environment:
      DBT_TARGET: dev
    volumes:
      - ./dbt:/usr/app/dbt
      - ./config:/usr/app/config
      - dbt_logs:/usr/app/dbt/logs
    networks:
      - pipeline_network
    profiles: ["dbt"]

  # Python ingestion service
  ingestion-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    environment:
      SERVICE_TYPE: ingestion
      ENVIRONMENT: development
    volumes:
      - ./src:/usr/app/src
      - ./config:/usr/app/config
      - ./logs:/usr/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pipeline_network

  # Python processing service
  processing-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    environment:
      SERVICE_TYPE: processor
      ENVIRONMENT: development
    volumes:
      - ./src:/usr/app/src
      - ./config:/usr/app/config
      - ./logs:/usr/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pipeline_network

  # Monitoring service
  monitoring-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    environment:
      SERVICE_TYPE: monitor
      ENVIRONMENT: development
    volumes:
      - ./src:/usr/app/src
      - ./config:/usr/app/config
      - ./logs:/usr/app/logs
    ports:
      - "9090:9090"
    networks:
      - pipeline_network

volumes:
  postgres_data:
  dbt_logs:

networks:
  pipeline_network:
    driver: bridge

# Profile for running only dbt-related services
profiles:
  dbt:
    services:
      - dbt